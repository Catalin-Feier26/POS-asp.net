@page
@model RestaurantPOS.Pages.Admin.ManageUsers
@inject IHttpClientFactory HttpClientFactory

@{
    ViewData["Title"] = "Manage Users";
}

<h2 class="mt-4">Manage Users</h2>

<!-- Create User Form -->
<div class="card my-4">
    <div class="card-body">
        <h5 class="card-title">Create New User</h5>
        <form id="create-user-form">
            <div class="mb-2">
                <input type="text" class="form-control" id="create-username" placeholder="Username" required />
            </div>
            <div class="mb-2">
                <input type="email" class="form-control" id="create-email" placeholder="Email" required />
            </div>
            <div class="mb-2">
                <input type="password" class="form-control" id="create-password" placeholder="Password" required />
            </div>
            <button type="submit" class="btn btn-primary">Create User</button>
        </form>
    </div>
</div>

<!-- Users Table -->
<table class="table table-bordered mt-4">
    <thead class="table-dark">
    <tr>
        <th>Id</th>
        <th>Username</th>
        <th>Email</th>
        <th>Role</th>
        <th>Actions</th>
    </tr>
    </thead>
    <tbody id="users-table-body">
    <!-- Filled dynamically -->
    </tbody>
</table>

<!-- Update User Modal -->
<div class="modal fade" id="updateUserModal" tabindex="-1" aria-labelledby="updateUserModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form id="update-user-form">
                <div class="modal-header">
                    <h5 class="modal-title">Update User</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <input type="hidden" id="update-user-id" />
                    <div class="mb-2">
                        <input type="text" class="form-control" id="update-username" placeholder="Username" required />
                    </div>
                    <div class="mb-2">
                        <input type="email" class="form-control" id="update-email" placeholder="Email" required />
                    </div>
                    <div class="mb-2">
                        <input type="password" class="form-control" id="update-password" placeholder="Password (leave blank to keep)" />
                    </div>
                    <div class="mb-2">
                        <select class="form-select" id="update-role">
                            <option value="Admin">Admin</option>
                            <option value="Server">Server</option>
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-primary">Save Changes</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        async function loadUsers() {
            const response = await fetch('/api/user');
            const users = await response.json();
            const tbody = document.getElementById('users-table-body');
            tbody.innerHTML = '';
            users.forEach(user => {
                tbody.innerHTML += `
                <tr>
                    <td>${user.id}</td>
                    <td>${user.username}</td>
                    <td>${user.email}</td>
                    <td>${user.role}</td>
                    <td>
                        <button class="btn btn-sm btn-warning" onclick="openUpdateModal(${user.id}, '${user.username}', '${user.email}', '${user.role}')">Update</button>
                        <button class="btn btn-sm btn-danger" onclick="deleteUser(${user.id})">Delete</button>
                    </td>
                </tr>
            `;
            });
        }

        async function createUser(e) {
            e.preventDefault();
            const username = document.getElementById('create-username').value;
            const email = document.getElementById('create-email').value;
            const password = document.getElementById('create-password').value;

            const response = await fetch('/api/user', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ username, email, password })
            });

            if (response.ok) {
                await loadUsers();
                document.getElementById('create-user-form').reset();
            } else {
                alert('Failed to create user.');
            }
        }

        async function updateUser(e) {
            e.preventDefault();
            const id = document.getElementById('update-user-id').value;
            const username = document.getElementById('update-username').value;
            const email = document.getElementById('update-email').value;
            const password = document.getElementById('update-password').value;
            const role = document.getElementById('update-role').value;

            const response = await fetch(`/api/user/${id}`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ username, email, password, role })
            });

            if (response.ok) {
                await loadUsers();
                var modal = bootstrap.Modal.getInstance(document.getElementById('updateUserModal'));
                modal.hide();
            } else {
                alert('Failed to update user.');
            }
        }

        async function deleteUser(id) {
            if (!confirm('Are you sure you want to delete this user?')) return;

            const response = await fetch(`/api/user/${id}`, { method: 'DELETE' });

            if (response.ok) {
                await loadUsers();
            } else {
                alert('Failed to delete user.');
            }
        }

        function openUpdateModal(id, username, email, role) {
            document.getElementById('update-user-id').value = id;
            document.getElementById('update-username').value = username;
            document.getElementById('update-email').value = email;
            document.getElementById('update-password').value = '';
            document.getElementById('update-role').value = role;
            var modal = new bootstrap.Modal(document.getElementById('updateUserModal'));
            modal.show();
        }

        document.getElementById('create-user-form').addEventListener('submit', createUser);
        document.getElementById('update-user-form').addEventListener('submit', updateUser);

        loadUsers();
    </script>
}
