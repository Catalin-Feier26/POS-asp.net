@page
@model RestaurantPOS.Pages.Server.ManageTables
@inject IHttpClientFactory HttpClientFactory

@{
    ViewData["Title"] = "Manage Tables";
}

<h2 class="mt-4">Manage Tables</h2>

<!-- Create Table Form -->
<div class="card my-4">
    <div class="card-body">
        <h5 class="card-title">Add New Table</h5>
        <form id="create-table-form">
            <div class="mb-2">
                <input type="number" class="form-control" id="create-number" placeholder="Table Number" required />
            </div>
            <div class="mb-2">
                <select class="form-select" id="create-status">
                    <option value="Free">Free</option>
                    <option value="Occupied">Occupied</option>
                </select>
            </div>
            <button type="submit" class="btn btn-primary">Add Table</button>
        </form>
    </div>
</div>

<!-- Tables List -->
<table class="table table-bordered mt-4">
    <thead class="table-dark">
    <tr>
        <th>Id</th>
        <th>Number</th>
        <th>Status</th>
        <th>Actions</th>
    </tr>
    </thead>
    <tbody id="tables-table-body">
    <!-- Filled dynamically -->
    </tbody>
</table>

<!-- Update Modal -->
<div class="modal fade" id="updateTableModal" tabindex="-1" aria-labelledby="updateTableModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form id="update-table-form">
                <div class="modal-header">
                    <h5 class="modal-title">Update Table</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <input type="hidden" id="update-id" />
                    <div class="mb-2">
                        <input type="number" class="form-control" id="update-number" placeholder="Table Number" required />
                    </div>
                    <div class="mb-2">
                        <select class="form-select" id="update-status">
                            <option value="Free">Free</option>
                            <option value="Occupied">Occupied</option>
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-primary">Save Changes</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        async function loadTables() {
            const response = await fetch('/api/table');
            const tables = await response.json();
            const tbody = document.getElementById('tables-table-body');
            tbody.innerHTML = '';
            tables.forEach(t => {
                tbody.innerHTML += `
                <tr>
                    <td>${t.id}</td>
                    <td>${t.number}</td>
                    <td>${t.status}</td>
                    <td>
                        <button class="btn btn-sm btn-warning" onclick="openUpdateModal(${t.id}, ${t.number}, '${t.status}')">Update</button>
                        <button class="btn btn-sm btn-danger" onclick="deleteTable(${t.id})">Delete</button>
                    </td>
                </tr>
            `;
            });
        }

        async function createTable(e) {
            e.preventDefault();
            const number = parseInt(document.getElementById('create-number').value);
            const status = document.getElementById('create-status').value;

            const response = await fetch('/api/table', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ number, status })
            });

            if (response.ok) {
                await loadTables();
                document.getElementById('create-table-form').reset();
            } else {
                alert('Failed to create table.');
            }
        }

        async function updateTable(e) {
            e.preventDefault();
            const id = document.getElementById('update-id').value;
            const number = parseInt(document.getElementById('update-number').value);
            const status = document.getElementById('update-status').value;

            const response = await fetch(`/api/table/${id}`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ number, status })
            });

            if (response.ok) {
                await loadTables();
                var modal = bootstrap.Modal.getInstance(document.getElementById('updateTableModal'));
                modal.hide();
            } else {
                alert('Failed to update table.');
            }
        }

        async function deleteTable(id) {
            if (!confirm('Are you sure you want to delete this table?')) return;

            const response = await fetch(`/api/table/${id}`, { method: 'DELETE' });

            if (response.ok) {
                await loadTables();
            } else {
                alert('Failed to delete table.');
            }
        }

        function openUpdateModal(id, number, status) {
            document.getElementById('update-id').value = id;
            document.getElementById('update-number').value = number;
            document.getElementById('update-status').value = status;
            var modal = new bootstrap.Modal(document.getElementById('updateTableModal'));
            modal.show();
        }

        document.getElementById('create-table-form').addEventListener('submit', createTable);
        document.getElementById('update-table-form').addEventListener('submit', updateTable);

        loadTables();
    </script>
}
